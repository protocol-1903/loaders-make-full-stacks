-- required to load SA for whatever reason
if not data.raw.tile["empty-space"] then
  local empty_space = table.deepcopy(data.raw.tile["out-of-map"])
  empty_space.name = "empty-space"
  data:extend{empty_space}
end

local alt_loaders, stacked_loaders = {}, {}

-- update util constant for max stack size
data.raw["utility-constants"]["default"].max_belt_stack_size = 
  (data.raw["utility-constants"]["default"].max_belt_stack_size or 0) > 1
  and data.raw["utility-constants"]["default"].max_belt_stack_size or 4

for _, prototype in pairs{
  data.raw.loader,
  data.raw["loader-1x1"]
} do
  for _, loader in pairs(prototype) do
    if stacked_loaders[loader.name] == nil then
      -- update stack size if required
      loader.max_belt_stack_size = (loader.max_belt_stack_size or 0) > 1 and loader.max_belt_stack_size or data.raw["utility-constants"]["default"].max_belt_stack_size
      
      if loader.name:sub(1, 4) ~= "aai-" or not mods["aai-loaders"] then
        local new = table.deepcopy(loader)
        new.name = "stack-" .. new.name
        new.localised_name = loader.localised_name or { "entity-name." .. loader.name }
        new.localised_description = loader.localised_description or { "entity-description." .. loader.name }
        new.placeable_by = new.placeable_by or data.raw.item[loader.name] and { item = loader.name, count = 1 }
        new.wait_for_full_stack = true
        new.factoriopedia_alternative = loader.name
        new.hidden_in_factoriopedia = true
        data:extend{new}

        -- save data
        stacked_loaders[loader.name] = false
        stacked_loaders[new.name] = true
        alt_loaders[loader.name] = new.name
        alt_loaders[new.name] = loader.name
      elseif mods["aai-loaders"] and loader.name:sub(1, 4) == "aai-" then
        -- make loader using aai bcause i need it to 
        local aai_data = AAILoaders.make_tier{
          name = loader.name == "aai-loader" and "stack" or "stack-" .. loader.name:sub(5, -8),
          transport_belt = "transport-belt",
          speed = loader.speed,
          color = {1, 1, 1},
          fast_replaceable_group = loader.fast_replaceable_group,
          fluid = settings.startup["aai-loaders-mode"].value == "lubricated" and data.raw["storage-tank"][loader.name .. "-pipe"].fluid_box.filter or nil,
          fluid_per_minute = settings.startup["aai-loaders-mode"].value == "lubricated" and data.raw["storage-tank"][loader.name .. "-pipe"].fluid_box.volume - 100 or nil,
          recipe = {energy_required = 1},
          unlubricated_recipe = {energy_required = 1},
          collision_mask = loader.collision_mask,
          upgrade = loader.next_upgrade and "aai-stack-" .. loader.next_upgrade:sub(5) or nil,
          localise = true
        }

        -- delete autogenerated recipe and item
        data.raw.recipe[aai_data.recipe.name] = nil
        data.raw.item[aai_data.item.name] = nil

        -- modify required values
        aai_data.loader.filter_count = loader.filter_count
        aai_data.loader.per_lane_filters = loader.per_lane_filters
        aai_data.loader.max_belt_stack_size = (loader.max_belt_stack_size or 0) > 1 and loader.max_belt_stack_size or data.raw["utility-constants"]["default"].max_belt_stack_size
        aai_data.loader.wait_for_full_stack = true
        aai_data.loader.factoriopedia_alternative = loader.name
        aai_data.loader.hidden_in_factoriopedia = true

        -- patch stuff we don't want autofilled by aai
        aai_data.loader.icons = loader.icons
        aai_data.loader.minable = loader.minable
        aai_data.loader.placeable_by = data.raw.item[loader.name] and { item = loader.name, count = 1 } or data.raw.item["aai-" .. loader.name:sub(10)] and { item = "aai-" .. loader.name:sub(10), count = 1 }
        aai_data.loader.localised_name = loader.localised_name or { "entity-name." .. loader.name }
        aai_data.loader.belt_animation_set = loader.belt_animation_set
        aai_data.loader.structure = loader.structure

        -- save data
        stacked_loaders[loader.name] = false
        stacked_loaders[aai_data.loader.name] = true
        alt_loaders[loader.name] = aai_data.loader.name
        alt_loaders[aai_data.loader.name] = loader.name
      end
    end
  end
end

data:extend{{
  type = "mod-data",
  name = "loaders-make-full-stacks",
  data = {
    alt_loaders = alt_loaders,
    stacked_loaders = stacked_loaders
  },
  hidden_in_factoriopedia = true,
  hidden = true
}}

-- update lane filtered loaders, if appliccable
if mods["lane-filtered-loaders"] then
  local lane_filtered_loaders = data.raw["mod-data"]["lane-filtered-loaders"].data.lane_filtered_loaders
  local alt_lane_loaders = data.raw["mod-data"]["lane-filtered-loaders"].data.alt_loaders
  for _, prototype in pairs{
    data.raw.loader,
    data.raw["loader-1x1"]
  } do
    for _, loader in pairs(prototype) do
      if lane_filtered_loaders[loader.name] == nil then
        local alt = alt_loaders[alt_lane_loaders[alt_loaders[loader.name]]]
        alt_lane_loaders[alt] = loader.name
        alt_lane_loaders[loader.name] = alt
        lane_filtered_loaders[loader.name] = lane_filtered_loaders[alt_loaders[loader.name]]
        lane_filtered_loaders[alt] = lane_filtered_loaders[alt_lane_loaders[alt_loaders[loader.name]]]
      end
    end
  end
  data.raw["mod-data"]["lane-filtered-loaders"].data.lane_filtered_loaders = lane_filtered_loaders
  data.raw["mod-data"]["lane-filtered-loaders"].data.alt_loaders = alt_lane_loaders
end